// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../../prisma/generated"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  name        String       @unique
  email       String       @unique
  password    String
  bio         String?
  avatarUrl   String?
  reviews     Review[]
  library     UserGame[]
  collections Collection[]
}

model Game {
  id             Int              @id @default(autoincrement())
  igdbId         Int              @unique
  title          String
  slug           String?
  rating         Float?
  summary        String?
  storyline      String?
  releaseDate    DateTime?
  coverImage     Img?             @relation("cover", fields: [coverImageId], references: [id])
  coverImageId   Int?             @unique
  genres         Genre[]
  dlcs           Game[]           @relation("gameDlcs")
  parent_game    Game?            @relation("gameDlcs", fields: [gameId], references: [id])
  gameId         Int?
  platforms      Platform[]
  developer      Company[]        @relation("DevelopedBy")
  publisher      Company[]        @relation("PublishedBy")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  reviews        Review[]
  screenshots    Screenshots[]
  ageRating      AgeRating[]
  userGames      UserGame[]
  artworks       Img[]            @relation("artworks")
  gameModes      GameMode[]
  similarGames   Game[]           @relation("SimilarGames")
  similarTo      Game[]           @relation("SimilarGames")
  CollectionGame CollectionGame[]

}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    Int
  createdAt DateTime @default(now())

  @@unique([userId, gameId])
}

model Img {
  id     Int    @id @default(autoincrement())
  igdbId Int    @unique
  url    String

  coverFor Game? @relation("cover")

  artworks Game[] @relation("artworks")
}

model Genre {
  id     Int     @id @default(autoincrement())
  igdbId Int     @unique
  name   String
  slug   String?
  games  Game[]
}

model Platform {
  id           Int     @id @default(autoincrement())
  igdbId       Int     @unique
  name         String
  slug         String?
  abbreviation String?
  games        Game[]
}

model Company {
  id             Int     @id @default(autoincrement())
  igdbId         Int     @unique
  name           String
  description    String?
  developedGames Game[]  @relation("DevelopedBy")
  publishedGames Game[]  @relation("PublishedBy")
}

model Screenshots {
  id      Int    @id @default(autoincrement())
  igdbId  Int    @unique
  game    Game   @relation(fields: [gameId], references: [id])
  gameId  Int
  imageId String
  url     String
}

model AgeRating {
  id     Int  @id @default(autoincrement())
  igdbId Int  @unique
  game   Game @relation(fields: [gameId], references: [id])
  gameId Int

  organization   Int
  ratingCategory Int
  synopsis       String?
  ratingCoverUrl String?
}

model UserGame {
  userId       String
  gameId       Int
  status       GameStatus
  hoursPlayed  Int        @default(0)
  rating       Float?
  favorite     Boolean    @default(false)
  addedAt      DateTime   @default(now())
  lastPlayedAt DateTime?
  completion   Float      @default(0)

  user User @relation(fields: [userId], references: [id])
  game Game @relation(fields: [gameId], references: [id])

  @@id([userId, gameId])
}

model GameMode {
  id     Int    @id @default(autoincrement())
  igdbId Int    @unique
  game   Game[]
  name   String
  slug   String
}

model Collection {
  id          Int              @id @default(autoincrement())
  description String?
  userId      String
  name        String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  games       CollectionGame[]
}

model CollectionGame {
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gameId       Int
  game         Game       @relation(fields: [gameId], references: [id])
  createdAt    DateTime   @default(now())

  @@id([collectionId, gameId])
}

enum GameStatus {
  Wishlist
  Playing
  Completed
  Backlog
  Dropped
}
