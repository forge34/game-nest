generator client {
  provider        = "prisma-client"
  output          = "../generated"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  name        String       @unique
  email       String       @unique
  password    String
  bio         String?
  avatarUrl   String?
  collections Collection[]
  reviews     Review[]
  library     UserGame[]
}

model Game {
  id                  Int              @id @default(autoincrement())
  igdbId              Int              @unique
  title               String
  slug                String?
  rating              Float?
  summary             String?
  storyline           String?
  releaseDate         DateTime?
  coverImageId        Int?             @unique
  gameId              Int?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  ageRating           AgeRating[]
  CollectionGame      CollectionGame[]
  coverImage          Img?             @relation("cover", fields: [coverImageId], references: [id])
  parent_game         Game?            @relation("gameDlcs", fields: [gameId], references: [id])
  dlcs                Game[]           @relation("gameDlcs")
  reviews             Review[]
  screenshots         Screenshots[]
  userGames           UserGame[]
  developer           Company[]        @relation("DevelopedBy")
  gameModes           GameMode[]       @relation("GameToGameMode")
  genres              Genre[]          @relation("GameToGenre")
  platforms           Platform[]       @relation("GameToPlatform")
  publisher           Company[]        @relation("PublishedBy")
  Game_SimilarGames_A Game[]           @relation("SimilarGames")
  Game_SimilarGames_B Game[]           @relation("SimilarGames")
  artworks            Img[]            @relation("artworks")
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  userId    String
  gameId    Int
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, gameId])
}

model Img {
  id       Int    @id @default(autoincrement())
  igdbId   Int    @unique
  url      String
  coverFor Game?  @relation("cover")
  artworks Game[] @relation("artworks")
}

model Genre {
  id     Int     @id @default(autoincrement())
  igdbId Int     @unique
  name   String
  slug   String?
  games  Game[]  @relation("GameToGenre")
}

model Platform {
  id           Int     @id @default(autoincrement())
  igdbId       Int     @unique
  name         String
  slug         String?
  abbreviation String?
  games        Game[]  @relation("GameToPlatform")
}

model Company {
  id             Int     @id @default(autoincrement())
  igdbId         Int     @unique
  name           String
  description    String?
  developedGames Game[]  @relation("DevelopedBy")
  publishedGames Game[]  @relation("PublishedBy")
}

model Screenshots {
  id      Int    @id @default(autoincrement())
  igdbId  Int    @unique
  gameId  Int
  imageId String
  url     String
  game    Game   @relation(fields: [gameId], references: [id])
}

model AgeRating {
  id             Int     @id @default(autoincrement())
  igdbId         Int     @unique
  gameId         Int
  organization   Int
  ratingCategory Int
  synopsis       String?
  ratingCoverUrl String?
  game           Game    @relation(fields: [gameId], references: [id])
}

model UserGame {
  userId       String
  gameId       Int
  status       GameStatus
  hoursPlayed  Int        @default(0)
  rating       Float?
  favorite     Boolean    @default(false)
  addedAt      DateTime   @default(now())
  lastPlayedAt DateTime?
  completion   Float      @default(0)
  game         Game       @relation(fields: [gameId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([userId, gameId])
}

model GameMode {
  id     Int    @id @default(autoincrement())
  igdbId Int    @unique
  name   String
  slug   String
  game   Game[] @relation("GameToGameMode")
}

model Collection {
  id          Int              @id @default(autoincrement())
  description String?
  userId      String
  name        String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  games       CollectionGame[]
}

model CollectionGame {
  collectionId Int
  gameId       Int
  createdAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  game         Game       @relation(fields: [gameId], references: [id])

  @@id([collectionId, gameId])
}

enum GameStatus {
  Wishlist
  Playing
  Completed
  Backlog
  Dropped
}
